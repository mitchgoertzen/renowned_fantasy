type LeaguePlayer {
  playerID: String
  teamID: String
}

type Matchup {
  teamOne: ID
  teamTwo: ID
  week: Int
}

type Roster {
  size: Int
  catcher: [ID]!
  firstBase: [ID]!
  secondBase: [ID]!
  thirdBase: [ID]!
  shortStop: [ID]!
  outfielders: [ID]!
  startingPitchers: [ID]!
  reliefPitchers: [ID]!
  bench: [ID]!
}

type Player @model @auth(rules: [{allow: private}]) {
  id: ID!
  First: String
  Last: String
  positions: [String]
  battingStats: BattingStats
  pitchingStats: PitchingStats
}

type PitchingStats {
  NewField: String
}

type BattingStats {
  NewField: String
}

type Record {
  wins: Int
  losses: Int
  draws: Int
  totalGames: Float
}

type Team @model @auth(rules: [{allow: public}, {allow: private}]) {
  id: ID!
  name: String!
  weeklyTrades: Int
  manager: ID! @index(name: "byManager")
  leagueID: ID! @index(name: "byLeague")
  logo: String
  record: Record
  battingStats: [BattingStats]
  pitchingStats: [PitchingStats]
  roster: Roster
}

type League @model @auth(rules: [{allow: public}, {allow: private}]) {
  id: ID!
  name: String!
  managers: [Manager] @manyToMany(relationName: "LeagueManager")
  creationDate: AWSDate!
  teams: [Team] @hasMany(indexName: "byLeague", fields: ["id"])
  owner: String
  matchups: [Matchup]
  statsCatgeories: String
  leaguePlayers: [LeaguePlayer]
  currentWeek: Int
}

type Manager @model @auth(rules: [{allow: public}, {allow: private}]) {
  id: ID!
  username: String!
  leagues: [League] @manyToMany(relationName: "LeagueManager")
  teams: [Team] @hasMany(indexName: "byManager", fields: ["id"])
  userID: String!
  record: Record
  avatar: String
  banner: String
}
 